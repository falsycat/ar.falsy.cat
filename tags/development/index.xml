<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>development on</title><link>https://ar.falsy.cat/tags/development/</link><description>Recent content in development on</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://ar.falsy.cat/tags/development/index.xml" rel="self" type="application/rss+xml"/><item><title>ArchLinuxへflutterをインストール</title><link>https://ar.falsy.cat/note/info-tech/install-flutter-on-archlinux/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ar.falsy.cat/note/info-tech/install-flutter-on-archlinux/</guid><description>初めに install-archlinuxの直後から， flutterのインストール方法を説明 flutter doctorがオールグリーンになるまで 1時間ぐらいは覚悟したほうがいい 特にandroid-studioがクソでかいので qemuイメージのリサイズをする羽目になった 参考文献 追記: qemu上だとパフォーマンスがゴミすぎてまともに使えなかった X( ハードウェアアクセラレーションとか頑張ればいけるのかもしれないけど，諦めてホストのMacbookに直接入れた 手順 1.</description></item><item><title>C/C++のsanitizerの使い方</title><link>https://ar.falsy.cat/note/info-tech/c-cpp-sanitizer/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ar.falsy.cat/note/info-tech/c-cpp-sanitizer/</guid><description>概要 バグを検知するコードを埋め込むための，sanitizerと呼ばれる機能がある このページではsanitizerの使い方を説明する 使い方 コンパイル時にsanitizerを埋め込む 種類ごとにオプションが異なる XXXにはSanitizer名をカンマ区切りで羅列する 代表的なSanitizer名については後述 1 2 g++ -fsanitizer=XXX a.</description></item><item><title>dart言語</title><link>https://ar.falsy.cat/note/info-tech/dart/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ar.falsy.cat/note/info-tech/dart/</guid><description>概要 Google製プログラミング言語 flutterのための言語 日本語資料少なめ オブジェクト指向 特徴 undefined behaviorは無い Null safety 型名に?を付ければNull許容型になる Null許容型に対してはNullチェックをしないとコンパイラがキレる 整数値以外は参照型 GC（mark &amp;amp; sweep）搭載 デストラクタは無さそう，そもそもmark &amp;amp; sweepでデストラクタは信頼できない コンストラクタが書きやすい わざわざメンバ変数と同じ名前の引数を書いて，代入して，，，ということをしなくてもいい 静的解析が強め 文法 大体は既存のやつと同じ 文末セミコロン必須 関数呼び出しの実引数リストでもケツカンマ許容 変数修飾子 型が自明な場合，型名は省略できる 省略できる場合は省略することが推奨される 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 // コンパイル時定数 const int x = 0; const x = 0; // 再代入不可能変数 final int x = 0; final x = 0; // 再代入可能変数 var int x = 0; var x = 0; // 遅延初期化変数 late int x; late final int x; final: 再代入不可能変数 値型の変数に対しては，値の変更を禁止する 参照型の変数に対しては，参照先の変更のみを禁止する dartでは，参照先のオブジェクトの変更を禁止することはできない late: 遅延初期化 変数の初期化を遅延させることができる 実質的にはNull safetyの無いNull許容型 late final修飾子によって複数回の代入をコンパイルエラーにできる ただし静的解析の精度は微妙なので，絶対に2回目の代入ができなくなるわけではない Null safety Null許容型に対しては，Nullを扱いやすくするための演算子が使える 関数の中で，変数に対して一度nullチェックをした場合，以降，その変数はNull許容型でないものとして扱える 1 2 3 4 5 6 7 8 9 10 11 12 13 14 (T?</description></item><item><title>flutter</title><link>https://ar.falsy.cat/note/info-tech/flutter/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ar.falsy.cat/note/info-tech/flutter/</guid><description>概要 flutterはマルチプラットフォーム GUIアプリケーション フレームワーク iOS/Android，Web，Windows/Linux/Mac，組み込み Google製 使用言語は Dart 環境構築 dart + flutterをインストール VSCodeにflutter用の拡張機能を追加 豆知識 ウィジェットツリー main関数からrunAppにウィジェットツリーを渡すことでメインループが始まる ウィジェットはStatelessなものとStatefullなものに大別できる Statefullなウィジェットが更新（setState）されると，そのウィジェットとその子孫のツリーが全て再構成（build）される パフォーマンス悪そうに見えるけれど，ウィジェットツリーの変更部分のみをシステム内部のエレメントツリーに反映することで画面更新を行なっているので，最適化はされている HTMLレンダラみたいな感じ 画面遷移 Navigatorが現在の画面の状態スタックを持つ pushで画面遷移 コルーチンのawaitで，遷移先がpopされた時の値を受け取れる popで前の画面に戻る ユーザーからの戻るボタン押下でも勝手にpopされ得る 呼び出し元へ返す値を引数に設定できる 1 2 3 4 5 6 7 8 9 // push (遷移後の画面がpopされるまでyield) final ret = await Navigator.</description></item></channel></rss>